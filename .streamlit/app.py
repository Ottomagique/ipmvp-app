import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import os
from datetime import datetime

# Importer l'API m√©t√©o et le mod√®le optimis√©
from weather_api import WeatherAPI
from optimized_model import OptimizedModelIPMVP

# Configuration de la page
st.set_page_config(
    page_title="Analyse IPMVP avec M√©t√©o",
    page_icon="üìä",
    layout="wide"
)

# Fonction d'authentification
def check_password():
    """Retourne True si l'utilisateur a entr√© le bon mot de passe"""
    if "authentication_status" in st.session_state:
        return st.session_state["authentication_status"]
        
    st.title("Connexion √† l'application IPMVP")
    
    # Cet espace fait de la place pour la zone de login
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # Centrer le formulaire de login
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.subheader("Veuillez vous connecter")
        username = st.text_input("Nom d'utilisateur", key="username")
        password = st.text_input("Mot de passe", type="password", key="password")
        
        if st.button("Connexion"):
            # V√©rifier si secrets est disponible (d√©ploiement)
            try:
                if username in st.secrets["passwords"] and password == st.secrets["passwords"][username]:
                    st.session_state["authentication_status"] = True
                    st.rerun()
                else:
                    st.error("Nom d'utilisateur ou mot de passe incorrect")
            except:
                # Mode d√©veloppement - accepter des identifiants par d√©faut
                if username == "admin" and password == "admin":
                    st.warning("Mode d√©veloppement: utilisation des identifiants par d√©faut")
                    st.session_state["authentication_status"] = True
                    st.rerun()
                else:
                    st.error("Nom d'utilisateur ou mot de passe incorrect")
    
    return False

# V√©rifier l'authentification avant d'afficher l'application
if not check_password():
    st.stop()  # Arr√™te l'ex√©cution de l'application si non authentifi√©

# Fonction pour charger les donn√©es
@st.cache_data
def load_data(file):
    try:
        return pd.read_excel(file)
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier: {e}")
        return None

# Titre de l'application
st.title("üìä Analyse IPMVP avec Donn√©es M√©t√©o")
st.markdown("""
Cette application vous permet d'analyser vos donn√©es de consommation √©nerg√©tique en les corr√©lant 
avec des donn√©es m√©t√©orologiques r√©cup√©r√©es automatiquement. L'application utilise les mod√®les conformes
au protocole IPMVP (International Performance Measurement and Verification Protocol).
""")

# Barre lat√©rale pour les param√®tres
st.sidebar.header("Configuration")

# Section 1: Chargement des donn√©es
st.sidebar.subheader("1. Donn√©es de consommation")
uploaded_file = st.sidebar.file_uploader("Chargez votre fichier Excel de consommation", type=["xlsx", "xls"])

# Afficher un dataset d'exemple si aucun fichier n'est charg√©
if uploaded_file is None:
    st.info("üëÜ Veuillez charger votre fichier Excel contenant les donn√©es de consommation.")
    
    # Cr√©er un exemple de donn√©es
    example_data = {
        'Date': pd.date_range(start='2023-01-01', periods=12, freq='ME'),
        'Consommation': [570, 467, 490, 424, 394, 350, 320, 310, 370, 420, 480, 540]
    }
    example_df = pd.DataFrame(example_data)
    
    col1, col2 = st.columns(2)
    with col1:
        st.write("Exemple de donn√©es attendues:")
        st.dataframe(example_df)
    
    with col2:
        st.write("Structure recommand√©e:")
        st.markdown("""
        - Une colonne avec les dates
        - Une colonne avec les consommations
        - Jusqu'√† 4 colonnes pour des variables explicatives (ex: DJU)
        """)
    
    proceed = False
else:
    # Charger les donn√©es
    df = load_data(uploaded_file)
    
    if df is not None:
        st.subheader("Donn√©es charg√©es")
        st.dataframe(df)
        
        # Identification automatique des colonnes
        date_col = None
        conso_col = None
        
        for col in df.columns:
            if pd.api.types.is_datetime64_any_dtype(df[col]) or 'date' in str(col).lower():
                date_col = col
            elif 'conso' in str(col).lower() or 'energy' in str(col).lower() or 'energie' in str(col).lower():
                conso_col = col
        
        # S√©lection des colonnes
        st.sidebar.write("Colonnes identifi√©es:")
        date_col = st.sidebar.selectbox("Colonne de date", options=df.columns, index=0 if date_col is None else list(df.columns).index(date_col))
        conso_col = st.sidebar.selectbox("Colonne de consommation", options=df.columns, index=1 if conso_col is None else list(df.columns).index(conso_col))
        
        # S√©lection des variables explicatives
        st.sidebar.write("Variables explicatives:")
        var_options = [col for col in df.columns if col != date_col and col != conso_col]
        
        # Utilisation de multiselect pour permettre √† l'utilisateur de choisir plusieurs variables
        selected_vars = st.sidebar.multiselect(
            "S√©lectionnez jusqu'√† 4 variables", 
            options=var_options,
            default=[col for col in var_options if 'dju' in str(col).lower() or 'degre' in str(col).lower()][:4]
        )
        
        # S'assurer que la colonne de date est au format datetime
        try:
            df[date_col] = pd.to_datetime(df[date_col])
        except:
            st.warning(f"La colonne {date_col} n'a pas pu √™tre convertie en date.")
        
        proceed = True
    else:
        proceed = False

# Section 2: Donn√©es m√©t√©o et configuration du mod√®le
if proceed:
    # Section 2: Donn√©es m√©t√©o
    st.sidebar.subheader("2. Donn√©es m√©t√©o")
    use_weather_api = st.sidebar.checkbox("R√©cup√©rer donn√©es m√©t√©o automatiquement", value=True)

    if use_weather_api:
        # Types de saisie pour la localisation
        location_type = st.sidebar.radio(
            "Type de localisation", 
            options=["Ville", "Coordonn√©es GPS"], 
            index=0
        )
        
        if location_type == "Ville":
            city = st.sidebar.text_input("Ville", "Paris")
            location = f"{city},FR"
        else:
            col1, col2 = st.sidebar.columns(2)
            with col1:
                lat = st.number_input("Latitude", value=48.8566, format="%.4f")
            with col2:
                lon = st.number_input("Longitude", value=2.3522, format="%.4f")
            location = f"{lat},{lon}"
        
        # Bases de temp√©rature
        st.sidebar.subheader("Bases de temp√©rature")
        include_dju = st.sidebar.checkbox("Inclure DJU (chauffage)", value=True)
        if include_dju:
            dju_bases = st.sidebar.multiselect(
                "Bases DJU (¬∞C)", 
                options=[15, 16, 17, 18, 19, 20],
                default=[18]
            )
        else:
            dju_bases = []
            
        include_djf = st.sidebar.checkbox("Inclure DJF (climatisation)", value=True)
        if include_djf:
            djf_bases = st.sidebar.multiselect(
                "Bases DJF (¬∞C)", 
                options=[20, 21, 22, 23, 24, 25, 26],
                default=[22]
            )
        else:
            djf_bases = []

    # Section 3: Configuration du mod√®le
    st.sidebar.subheader("3. Configuration du mod√®le")
    
    # Nombre maximum de variables
    max_features = st.sidebar.slider("Nombre maximum de variables", 1, 4, min(4, len(selected_vars) if selected_vars else 1))
    
    # Bouton pour lancer l'analyse
    if st.sidebar.button("üöÄ Lancer l'analyse IPMVP"):
        if not selected_vars and not use_weather_api:
            st.warning("Vous n'avez s√©lectionn√© aucune variable explicative et d√©sactiv√© l'API m√©t√©o. L'analyse risque de ne pas √™tre pertinente.")
        
        st.subheader("Analyse IPMVP en cours...")
        
        # Dates min et max √† partir des donn√©es
        start_date = df[date_col].min().strftime('%Y-%m-%d')
        end_date = df[date_col].max().strftime('%Y-%m-%d')
        
        st.write(f"P√©riode analys√©e: du {start_date} au {end_date}")
        
        # Afficher la progression
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Variables pour l'analyse
        analysis_vars = list(selected_vars)
        dates_for_analysis = df[date_col]
        consumption_data = df.copy()
        
        # Si l'API m√©t√©o est activ√©e, r√©cup√©rer et fusionner les donn√©es
        if use_weather_api:
            status_text.text("R√©cup√©ration des donn√©es m√©t√©o...")
            progress_bar.progress(10)
            
            # Initialiser l'API m√©t√©o
            weather_api = WeatherAPI()
            
            # R√©cup√©rer les donn√©es
            weather_data = weather_api.get_weather_data(
                location,
                start_date,
                end_date,
                bases_dju=dju_bases,
                bases_djf=djf_bases
            )
            
            if not weather_data.empty:
                st.subheader("Donn√©es m√©t√©o mensuelles")
                st.dataframe(weather_data)
                
                # Fusionner avec les donn√©es de consommation
                status_text.text("Fusion des donn√©es...")
                progress_bar.progress(30)
                
                # Convertir les dates en p√©riode mensuelle
                consumption_data['month'] = pd.to_datetime(consumption_data[date_col]).dt.to_period('M')
                
                # Fusion
                merged_df = pd.merge(consumption_data, weather_data, on='month', how='inner')
                
                # V√©rifier la fusion
                if len(merged_df) < len(consumption_data):
                    st.warning(f"{len(consumption_data) - len(merged_df)} lignes n'ont pas pu √™tre fusionn√©es")
                
                st.subheader("Donn√©es fusionn√©es")
                st.dataframe(merged_df)
                
                # Variables m√©t√©o disponibles
                meteo_vars = [col for col in weather_data.columns 
                             if col not in ['date', 'month', 'localisation'] 
                             and any(x in col for x in ['dju', 'djf', 'temp', 'sun'])]
                
                # Ajouter les variables m√©t√©o √† la liste des variables d'analyse
                all_available_vars = analysis_vars + [v for v in meteo_vars if v not in analysis_vars]
                
                # Laisser l'utilisateur choisir les variables √† utiliser
                selected_analysis_vars = st.multiselect(
                    "Variables √† utiliser pour l'analyse IPMVP",
                    options=all_available_vars,
                    default=[v for v in all_available_vars if "dju_base_18" in v] if "dju_base_18" in all_available_vars else all_available_vars[:1]
                )
                
                if selected_analysis_vars:
                    # Mettre √† jour les variables d'analyse
                    analysis_vars = selected_analysis_vars
                    consumption_data = merged_df
                    dates_for_analysis = merged_df['date_x'] if 'date_x' in merged_df.columns else merged_df[date_col]
                else:
                    st.warning("Aucune variable s√©lectionn√©e pour l'analyse. Utilisation des variables initiales.")
        
        # Continuer avec l'analyse IPMVP
        status_text.text("Pr√©paration des donn√©es pour l'analyse IPMVP...")
        progress_bar.progress(50)
        
        # Pr√©paration des donn√©es
        X = consumption_data[analysis_vars]
        y = consumption_data[conso_col]
        
        # Cr√©ation et entrainement du mod√®le IPMVP
        status_text.text("Recherche du meilleur mod√®le... Priorit√© aux mod√®les simples")
        
        modele_ipmvp = OptimizedModelIPMVP()
        success = modele_ipmvp.trouver_meilleur_modele(
            X, y, max_features=max_features,
            progress_callback=lambda p: progress_bar.progress(50 + p * 0.4)
        )
        
        if success:
            status_text.text("Analyse termin√©e avec succ√®s!")
            
            # Rapport
            rapport = modele_ipmvp.generer_rapport(y_original=y)
            st.subheader("R√©sultats de l'analyse IPMVP")
            st.text(rapport)
            
            # Visualisation
            st.subheader("Visualisation des r√©sultats")
            results_df = modele_ipmvp.visualiser_resultats(X, y, dates=dates_for_analysis)
            
            # Afficher les graphiques
            st.image('resultats_modele_ipmvp.png')
            st.image('comparaison_consommations.png')
            
            # T√©l√©chargement des r√©sultats
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Donn√©es d\'origine', index=False)
                if 'merged_df' in locals():
                    merged_df.to_excel(writer, sheet_name='Donn√©es avec m√©t√©o', index=False)
                if "Info" not in results_df.columns:  # Si des r√©sultats valides
                    results_df.to_excel(writer, sheet_name='R√©sultats', index=False)
                else:
                    pd.DataFrame({"Message": ["Pas de r√©sultats valides"]}).to_excel(writer, sheet_name='R√©sultats', index=False)
                    
            st.download_button(
                label="üì• T√©l√©charger les r√©sultats",
                data=buffer.getvalue(),
                file_name="resultats_ipmvp.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            status_text.text("Analyse termin√©e, mais aucun mod√®le conforme trouv√©.")
            st.warning("Aucun mod√®le conforme aux crit√®res IPMVP n'a pu √™tre trouv√© avec ces donn√©es. Essayez d'ajouter plus de variables explicatives ou d'assouplir les crit√®res.")

        # Terminer la barre de progression
        progress_bar.progress(100)

# Footer
st.sidebar.markdown("---")
st.sidebar.info("D√©velopp√© avec ‚ù§Ô∏è pour l'analyse IPMVP")
