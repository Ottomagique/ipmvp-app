import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import os
from datetime import datetime
import requests

# Configuration de la page
st.set_page_config(
    page_title="Analyse IPMVP avec M√©t√©o",
    page_icon="üìä",
    layout="wide"
)

# Fonction d'authentification
def check_password():
    """Retourne True si l'utilisateur a entr√© le bon mot de passe"""
    if "authentication_status" in st.session_state:
        return st.session_state["authentication_status"]
        
    st.title("Connexion √† l'application IPMVP")
    
    # Cet espace fait de la place pour la zone de login
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # Centrer le formulaire de login
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.subheader("Veuillez vous connecter")
        username = st.text_input("Nom d'utilisateur", key="username")
        password = st.text_input("Mot de passe", type="password", key="password")
        
        if st.button("Connexion"):
            # V√©rifier si secrets est disponible (d√©ploiement)
            try:
                if username in st.secrets["passwords"] and password == st.secrets["passwords"][username]:
                    st.session_state["authentication_status"] = True
                    st.rerun()
                else:
                    st.error("Nom d'utilisateur ou mot de passe incorrect")
            except:
                # Mode d√©veloppement - accepter des identifiants par d√©faut
                if username == "admin" and password == "admin":
                    st.warning("Mode d√©veloppement: utilisation des identifiants par d√©faut")
                    st.session_state["authentication_status"] = True
                    st.rerun()
                else:
                    st.error("Nom d'utilisateur ou mot de passe incorrect")
    
    return False

# V√©rifier l'authentification avant d'afficher l'application
if not check_password():
    st.stop()  # Arr√™te l'ex√©cution de l'application si non authentifi√©

# Classe pour l'API m√©t√©o
class WeatherAPI:
    def __init__(self, api_key=None):
        self.api_key = api_key or "ZE3U556AFCCFHBXSFC95XRABC"
        self.base_url = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline"
    
    @st.cache_data(ttl=3600)
    def get_weather_data(self, location, start_date, end_date, bases_dju=[16, 18, 19], bases_djf=[22, 24, 26]):
        """
        R√©cup√®re les donn√©es m√©t√©o pour une p√©riode donn√©e
        
        Parameters:
        -----------
        location : str
            Ville fran√ßaise (ex: "Paris,FR", "Lyon,FR") ou coordonn√©es GPS
        start_date : str
            Date de d√©but au format 'YYYY-MM-DD'
        end_date : str
            Date de fin au format 'YYYY-MM-DD'
        bases_dju : list
            Liste des temp√©ratures de base pour les DJU (par d√©faut [16, 18, 19])
        bases_djf : list
            Liste des temp√©ratures de base pour les DJF (par d√©faut [22, 24, 26])
            
        Returns:
        --------
        pd.DataFrame
            Donn√©es mensuelles avec DJU, DJF pour diff√©rentes bases
        """
        # S'assurer que la localisation se termine par ,FR pour les villes fran√ßaises
        if ',' not in location and not (location.replace('.', '').replace('-', '').isdigit()):
            location = f"{location},FR"
            
        url = f"{self.base_url}/{location}/{start_date}/{end_date}"
        
        params = {
            'unitGroup': 'metric',
            'include': 'days',
            'key': self.api_key,
            'contentType': 'json',
            'elements': 'datetime,tempmax,tempmin,temp,humidity,precip,sunhours,dew,windspeed,cloudcover'
        }
        
        try:
            with st.spinner(f"R√©cup√©ration des donn√©es m√©t√©o pour {location}..."):
                response = requests.get(url, params=params)
                response.raise_for_status()
                data = response.json()
            
            # Extraire la localisation exacte utilis√©e
            resolved_address = data.get('resolvedAddress', location)
            st.success(f"Donn√©es m√©t√©o r√©cup√©r√©es pour: {resolved_address}")
            
            # Extraire les donn√©es quotidiennes
            daily_data = []
            for day in data.get('days', []):
                day_data = {
                    'date': day.get('datetime'),
                    'temp_max': day.get('tempmax'),
                    'temp_min': day.get('tempmin'),
                    'temp_mean': day.get('temp'),
                    'humidity': day.get('humidity'),
                    'precip': day.get('precip'),
                    'sunshine_hours': day.get('sunhours', 0),
                    'cloud_cover': day.get('cloudcover', 0)
                }
                
                # Calculer DJU pour diff√©rentes bases
                for base in bases_dju:
                    day_data[f'dju_base_{base}'] = max(0, base - day.get('temp'))
                
                # Calculer DJF pour diff√©rentes bases
                for base in bases_djf:
                    day_data[f'djf_base_{base}'] = max(0, day.get('temp') - base)
                
                daily_data.append(day_data)
            
            # Convertir en DataFrame
            weather_df = pd.DataFrame(daily_data)
            
            # Agr√©ger les donn√©es par mois
            monthly_df = self._aggregate_monthly(weather_df)
            
            # Ajouter la localisation utilis√©e
            monthly_df['localisation'] = resolved_address
            
            return monthly_df
            
        except Exception as e:
            st.error(f"Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o: {str(e)}")
            return pd.DataFrame()
    
    def _aggregate_monthly(self, df):
        """Agr√®ge les donn√©es quotidiennes en mensuelles"""
        if df.empty:
            return pd.DataFrame()
        
        # Convertir la date en datetime
        df['date'] = pd.to_datetime(df['date'])
        
        # Extraire le mois
        df['month'] = df['date'].dt.to_period('M')
        
        # Identifier les colonnes par type pour savoir comment les agr√©ger
        dju_cols = [col for col in df.columns if 'dju_base' in col]
        djf_cols = [col for col in df.columns if 'djf_base' in col]
        
        # Cr√©er le dictionnaire d'agr√©gation
        agg_dict = {}
        
        # DJU, DJF, pr√©cip, ensoleillement -> somme
        for col in dju_cols + djf_cols + ['precip', 'sunshine_hours']:
            if col in df.columns:
                agg_dict[col] = 'sum'
        
        # Temp√©ratures moyennes, humidit√© -> moyenne
        for col in ['temp_mean', 'humidity', 'cloud_cover']:
            if col in df.columns:
                agg_dict[col] = 'mean'
        
        # Temp√©ratures max/min
        if 'temp_max' in df.columns:
            agg_dict['temp_max'] = 'max'
        if 'temp_min' in df.columns:
            agg_dict['temp_min'] = 'min'
        
        # Agr√©ger par mois
        monthly_df = df.groupby('month').agg(agg_dict).reset_index()
        
        # Convertir le mois en date (1er jour du mois)
        monthly_df['date'] = monthly_df['month'].dt.to_timestamp()
        
        return monthly_df

# Fonction pour charger les donn√©es
@st.cache_data
def load_data(file):
    try:
        return pd.read_excel(file)
    except Exception as e:
        st.error(f"Erreur lors du chargement du fichier: {e}")
        return None

# Titre de l'application
st.title("üìä Analyse IPMVP avec Donn√©es M√©t√©o")
st.markdown("""
Cette application vous permet d'analyser vos donn√©es de consommation √©nerg√©tique en les corr√©lant 
avec des donn√©es m√©t√©orologiques r√©cup√©r√©es automatiquement. L'application utilise les mod√®les conformes
au protocole IPMVP (International Performance Measurement and Verification Protocol).
""")

# Barre lat√©rale pour les param√®tres
st.sidebar.header("Configuration")

# Section 1: Chargement des donn√©es
st.sidebar.subheader("1. Donn√©es de consommation")
uploaded_file = st.sidebar.file_uploader("Chargez votre fichier Excel de consommation", type=["xlsx", "xls"])

# Afficher un dataset d'exemple si aucun fichier n'est charg√©
if uploaded_file is None:
    st.info("üëÜ Veuillez charger votre fichier Excel contenant les donn√©es de consommation.")
    
    # Cr√©er un exemple de donn√©es
    example_data = {
        'Date': pd.date_range(start='2023-01-01', periods=12, freq='MS'),
        'Consommation': [570, 467, 490, 424, 394, 350, 320, 310, 370, 420, 480, 540]
    }
    example_df = pd.DataFrame(example_data)
    
    col1, col2 = st.columns(2)
    with col1:
        st.write("Exemple de donn√©es attendues:")
        st.dataframe(example_df)
    
    with col2:
        st.write("Structure recommand√©e:")
        st.markdown("""
        - Une colonne avec les dates
        - Une colonne avec les consommations
        - Jusqu'√† 4 colonnes pour des variables explicatives (ex: DJU)
        """)
    
    proceed = False
else:
    # Charger les donn√©es
    df = load_data(uploaded_file)
    
    if df is not None:
        st.subheader("Donn√©es charg√©es")
        st.dataframe(df)
        
        # Identification automatique des colonnes
        date_col = None
        conso_col = None
        
        for col in df.columns:
            if pd.api.types.is_datetime64_any_dtype(df[col]) or 'date' in str(col).lower():
                date_col = col
            elif 'conso' in str(col).lower() or 'energy' in str(col).lower() or 'energie' in str(col).lower():
                conso_col = col
        
        # S√©lection des colonnes
        st.sidebar.write("Colonnes identifi√©es:")
        date_col = st.sidebar.selectbox("Colonne de date", options=df.columns, index=0 if date_col is None else list(df.columns).index(date_col))
        conso_col = st.sidebar.selectbox("Colonne de consommation", options=df.columns, index=1 if conso_col is None else list(df.columns).index(conso_col))
        
        # S√©lection des variables explicatives
        st.sidebar.write("Variables explicatives:")
        var_options = [col for col in df.columns if col != date_col and col != conso_col]
        
        # Utilisation de multiselect pour permettre √† l'utilisateur de choisir plusieurs variables
        selected_vars = st.sidebar.multiselect(
            "S√©lectionnez jusqu'√† 4 variables", 
            options=var_options,
            default=[col for col in var_options if 'dju' in str(col).lower() or 'degre' in str(col).lower()][:4]
        )
        
        # S'assurer que la colonne de date est au format datetime
        try:
            df[date_col] = pd.to_datetime(df[date_col])
        except:
            st.warning(f"La colonne {date_col} n'a pas pu √™tre convertie en date.")
        
        proceed = True
    else:
        proceed = False

# Section 2: Donn√©es m√©t√©o et configuration du mod√®le
if proceed:
    # Section 2: Donn√©es m√©t√©o
    st.sidebar.subheader("2. Donn√©es m√©t√©o")
    use_weather_api = st.sidebar.checkbox("R√©cup√©rer donn√©es m√©t√©o automatiquement", value=True)

    if use_weather_api:
        # Types de saisie pour la localisation
        location_type = st.sidebar.radio(
            "Type de localisation", 
            options=["Ville", "Coordonn√©es GPS"], 
            index=0
        )
        
        if location_type == "Ville":
            city = st.sidebar.text_input("Ville", "Paris")
            location = f"{city},FR"
        else:
            col1, col2 = st.sidebar.columns(2)
            with col1:
                lat = st.number_input("Latitude", value=48.8566, format="%.4f")
            with col2:
                lon = st.number_input("Longitude", value=2.3522, format="%.4f")
            location = f"{lat},{lon}"
        
        # Bases de temp√©rature
        st.sidebar.subheader("Bases de temp√©rature")
        include_dju = st.sidebar.checkbox("Inclure DJU (chauffage)", value=True)
        if include_dju:
            dju_bases = st.sidebar.multiselect(
                "Bases DJU (¬∞C)", 
                options=[15, 16, 17, 18, 19, 20],
                default=[18]
            )
        else:
            dju_bases = []
            
        include_djf = st.sidebar.checkbox("Inclure DJF (climatisation)", value=True)
        if include_djf:
            djf_bases = st.sidebar.multiselect(
                "Bases DJF (¬∞C)", 
                options=[20, 21, 22, 23, 24, 25, 26],
                default=[22]
            )
        else:
            djf_bases = []

    # Section 3: Configuration du mod√®le
    st.sidebar.subheader("3. Configuration du mod√®le")
    
    # Nombre maximum de variables
    max_features = st.sidebar.slider("Nombre maximum de variables", 1, 4, min(4, len(selected_vars) if selected_vars else 1))
    
    # Bouton pour lancer l'analyse
    if st.sidebar.button("üöÄ Lancer l'analyse IPMVP"):
        # Dates min et max √† partir des donn√©es
        start_date = df[date_col].min().strftime('%Y-%m-%d')
        end_date = df[date_col].max().strftime('%Y-%m-%d')
        
        st.subheader("Analyse IPMVP en cours...")
        
        st.write(f"P√©riode analys√©e: du {start_date} au {end_date}")
        
        # Afficher la progression
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Si l'API m√©t√©o est activ√©e, r√©cup√©rer et fusionner les donn√©es
        if use_weather_api:
            status_text.text("R√©cup√©ration des donn√©es m√©t√©o...")
            progress_bar.progress(10)
            
            # Initialiser l'API m√©t√©o
            weather_api = WeatherAPI()
            
            # R√©cup√©rer les donn√©es
            weather_data = weather_api.get_weather_data(
                location,
                start_date,
                end_date,
                bases_dju=dju_bases,
                bases_djf=djf_bases
            )
            
            if not weather_data.empty:
                st.subheader("Donn√©es m√©t√©o mensuelles")
                st.dataframe(weather_data)
                
                # Fusionner avec les donn√©es de consommation
                status_text.text("Fusion des donn√©es...")
                progress_bar.progress(30)
                
                # Convertir les dates en p√©riode mensuelle
                df['month'] = pd.to_datetime(df[date_col]).dt.to_period('M')
                
                # Fusion
                merged_df = pd.merge(df, weather_data, on='month', how='inner')
                
                # V√©rifier la fusion
                if len(merged_df) < len(df):
                    st.warning(f"{len(df) - len(merged_df)} lignes n'ont pas pu √™tre fusionn√©es")
                
                st.subheader("Donn√©es fusionn√©es")
                st.dataframe(merged_df)
                
                # T√©l√©chargement des donn√©es m√©t√©o
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    weather_data.to_excel(writer, sheet_name='Donn√©es M√©t√©o', index=False)
                    merged_df.to_excel(writer, sheet_name='Donn√©es Fusionn√©es', index=False)
                
                st.download_button(
                    label="üì• T√©l√©charger les donn√©es m√©t√©o et fusionn√©es",
                    data=buffer.getvalue(),
                    file_name="donnees_meteo_ipmvp.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
                # Variables m√©t√©o disponibles pour l'analyse
                meteo_vars = [col for col in weather_data.columns 
                             if col not in ['date', 'month', 'localisation'] 
                             and any(x in col for x in ['dju', 'djf', 'temp', 'sun'])]
                
                # Ajouter √† la liste des variables disponibles
                st.subheader("Variables disponibles pour l'analyse")
                st.info("Utilisez ces variables dans votre mod√®le IPMVP pour une analyse plus pr√©cise.")
                
                # Afficher les variables
                all_vars = selected_vars + [v for v in meteo_vars if v not in selected_vars]
                for var in all_vars:
                    st.write(f"- {var}")
            
            else:
                st.error("Impossible de r√©cup√©rer les donn√©es m√©t√©o. V√©rifiez la localisation ou votre connexion internet.")
        
        # Terminer
        status_text.text("Analyse termin√©e!")
        progress_bar.progress(100)

# Footer
st.sidebar.markdown("---")
st.sidebar.info("D√©velopp√© avec ‚ù§Ô∏è pour l'analyse IPMVP")
